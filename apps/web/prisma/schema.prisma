generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output = "../ERD.pdf"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

model User {
  id                       String       @id @default(cuid())
  email                    String       @unique
  emailVerified            DateTime?
  name                     String?
  image                    String?
  password                 String?
  firstName                String?
  lastName                 String?
  profileImage             String?
  isEmailVerified          Boolean      @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  resetPasswordToken       String?
  resetPasswordExpires     DateTime?
  role                     UserRole     @default(USER)
  provider                 AuthProvider @default(EMAIL)
  providerId               String?
  dateOfBirth              DateTime?
  gender                   Gender?
  lastEducation            Education?
  currentAddress           String?
  phoneNumber              String?
  latitude                 Float?
  longitude                Float?

  provinceId String?
  province   Province? @relation(fields: [provinceId], references: [id])
  cityId     String?
  city       City?     @relation(fields: [cityId], references: [id])
  country    String    @default("Indonesia")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  accounts           Account[]
  sessions           Session[]
  authenticators     Authenticator[]
  company            Company?
  jobApplications    JobApplication[]
  savedJobs          SavedJob[]
  subscriptions      Subscription[]
  skillAssessments   UserSkillAssessment[]
  certificates       Certificate[]
  companyReviews     CompanyReview[]
  workExperiences WorkExperience[] 
  interviewSchedules InterviewSchedule[]
  notifications      Notification[]
  TestResult         TestResult[]
  generatedCvs       GeneratedCv[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Company {
  id          String       @id @default(cuid())
  name        String
  description String?
  banner      String?
  website     String?
  logo        String?
  industry    String?
  size        CompanySize?
  foundedYear Int?
  email       String?
  phone       String?
  address     String?
  latitude    Float?
  longitude   Float?

  provinceId   String?
  province     Province? @relation(fields: [provinceId], references: [id])
  cityId       String?
  city         City?     @relation(fields: [cityId], references: [id])
  country      String    @default("Indonesia")
  linkedinUrl  String?
  facebookUrl  String?
  twitterUrl   String?
  instagramUrl String?
  adminId      String    @unique
  admin        User      @relation(fields: [adminId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobPostings       JobPosting[]
  companyReviews    CompanyReview[]
  employeeRecords WorkExperience[] 
  preSelectionTests PreSelectionTest[]

  @@map("companies")
}

model GeneratedCv {
  id        String   @id @default(cuid())
  url       String 
  template  String   @default("ATS_DEFAULT") 
  fileName  String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("generated_cvs")
}

// ============================================
// JOB MANAGEMENT
// ============================================

model JobPosting {
  id              String          @id @default(cuid())
  title           String
  description     String
  banner          String?
  category        JobCategory
  employmentType  EmploymentType  @default(FULL_TIME)
  experienceLevel ExperienceLevel @default(ENTRY_LEVEL)
  salaryMin       Int?
  salaryMax       Int?
  salaryCurrency  String          @default("IDR")
  isRemote        Boolean         @default(false)
  latitude        Float?
  longitude       Float?

  provinceId          String?
  province            Province? @relation(fields: [provinceId], references: [id])
  cityId              String?
  city                City?     @relation(fields: [cityId], references: [id])
  country             String    @default("Indonesia")
  applicationDeadline DateTime?
  isActive            Boolean   @default(true)
  isPriority          Boolean   @default(false)
  requiresCoverLetter Boolean   @default(true)

  requirements String[]
  benefits     String[]
  tags         String[]

  companyId          String
  company            Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  preSelectionTestId String?
  preSelectionTest   PreSelectionTest? @relation(fields: [preSelectionTestId], references: [id])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  publishedAt        DateTime?

  applications       JobApplication[]
  savedByUsers       SavedJob[]
  interviewSchedules InterviewSchedule[]

  @@map("job_postings")
}

model JobApplication {
  id              String            @id @default(cuid())
  cvUrl           String
  expectedSalary  Int?
  coverLetter     String?
  status          ApplicationStatus @default(PENDING)
  rejectionReason String? // Reason for rejection
  adminNotes      String? // Internal notes from company admin

  testResultId String? @unique 
  testResult   TestResult? @relation(fields: [testResultId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPostingId String
  jobPosting   JobPosting  @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reviewedAt DateTime?

  interviewSchedules InterviewSchedule[]

  @@unique([userId, jobPostingId])
  @@map("job_applications")
}

model SavedJob {
  id String @id @default(cuid())

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPostingId String
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, jobPostingId])
  @@map("saved_jobs")
}

// ============================================
// LOCATION MANAGEMENT
// ===========================================

model Province {
  id        String @id @default(cuid())
  name      String @unique
  code      String @unique // e.g., "DKI", "JABAR"
  latitude  Float?
  longitude Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities      City[]
  users       User[]
  companies   Company[]
  jobPostings JobPosting[]

  @@map("provinces")
}

model City {
  id        String   @id @default(cuid())
  name      String
  type      CityType @default(CITY) // CITY, REGENCY
  latitude  Float?
  longitude Float?

  provinceId String
  province   Province @relation(fields: [provinceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  companies   Company[]
  jobPostings JobPosting[]

  @@unique([name, provinceId]) // Same city name can exist in different provinces
  @@map("cities")
}

// ============================================
// INTERVIEW MANAGEMENT
// ============================================

model InterviewSchedule {
  id            String        @id @default(cuid())
  scheduledAt   DateTime
  duration      Int           @default(60) // Duration in minutes
  location      String? // Physical location or meeting URL
  interviewType InterviewType @default(ONLINE)
  notes         String?

  status       InterviewStatus @default(SCHEDULED)
  reminderSent Boolean         @default(false)

  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobPostingId     String
  jobPosting       JobPosting     @relation(fields: [jobPostingId], references: [id])
  candidateId      String
  candidate        User           @relation(fields: [candidateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interview_schedules")
}

// ============================================
// PRE-SELECTION TESTS
// ============================================

model PreSelectionTest {
  id           String  @id @default(cuid())
  title        String
  description  String?
  passingScore Int     @default(75) // Minimum score to pass
  timeLimit    Int     @default(30) // Time limit in minutes
  isActive     Boolean @default(true)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions   PreSelectionQuestion[]
  jobPostings JobPosting[]
  TestResult  TestResult[]

  @@map("pre_selection_tests")
}

model PreSelectionQuestion {
  id            String  @id @default(cuid())
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // A, B, C, or D
  explanation   String? // Optional explanation for the correct answer

  testId String
  test   PreSelectionTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pre_selection_questions")
}

model TestResult {
  id             String           @id @default(cuid())
  test           PreSelectionTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  score          Float
  timeSpent      Int // dalam detik
  passed         Boolean
  answers        Json // menyimpan jawaban dalam format { questionId: selectedAnswer }
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobApplication JobApplication?

  @@index([testId])
  @@index([userId])
  @@map("test_results")
}

// ============================================
// SUBSCRIPTION SYSTEM
// ============================================

model SubscriptionPlan {
  id          String  @id @default(cuid())
  name        String  @unique // STANDARD, PROFESSIONAL
  price       Int // Price in IDR
  duration    Int     @default(30) // Duration in days
  description String?

  features Json // JSON object containing feature flags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                String    @id @default(cuid())
  startDate         DateTime  @default(now())
  endDate           DateTime
  status            SubscriptionStatus @default(ACTIVE)
  autoRenew         Boolean   @default(false)
  cancelledAt       DateTime? 
  cancellationReason String?  
  refundAmount      Float?    
  refundStatus      RefundStatus? 

  paymentMethod     PaymentMethod
  paymentProof      String?   
  paymentStatus     PaymentStatus @default(PENDING)
  transactionId     String?
  lastExpiryNotificationSent DateTime? 
  isRenewal              Boolean   @default(false)
  originalSubscriptionId String?

  userId String
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId String
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])
  userAssessments UserSkillAssessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// ============================================
// SKILL ASSESSMENT SYSTEM
// ============================================

model SkillCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  icon        String? // Icon URL or class name

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  skillAssessments SkillAssessment[]

  @@map("skill_categories")
}

model SkillAssessment {
  id           String  @id @default(cuid())
  title        String
  description  String?
  passingScore Int     @default(75)
  timeLimit    Int     @default(30) // Time limit in minutes
  isActive     Boolean @default(true)

  categoryId String
  category   SkillCategory @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions       SkillAssessmentQuestion[]
  userAssessments UserSkillAssessment[]

  @@map("skill_assessments")
}

model SkillAssessmentQuestion {
  id            String  @id @default(cuid())
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // A, B, C, or D
  explanation   String?

  assessmentId String
  assessment   SkillAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skill_assessment_questions")
}

model UserSkillAssessment {
  id String @id @default(cuid())

  score         Int // Score out of 100
  isPassed      Boolean   @default(false)
  completedAt   DateTime  @default(now())
  timeSpent     Int // Time spent in minutes
  badgeEarned   Boolean   @default(false)
  badgeIssuedAt DateTime?
  subscriptionId String? 
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessmentId String
  assessment   SkillAssessment @relation(fields: [assessmentId], references: [id])

  certificates Certificate[]

  @@unique([userId, assessmentId])
  @@map("user_skill_assessments")
}

model Certificate {
  id                String    @id @default(cuid())
  certificateCode   String    @unique // Unique verification code
  title             String
  description       String?
  issueDate         DateTime  @default(now())
  expiryDate        DateTime? // Optional expiry date
  certificateUrl    String // URL to generated PDF certificate
  qrCodeUrl         String? // URL to QR code image
  isValid           Boolean   @default(true)
  verificationCount Int       @default(0) // Track how many times verified

  userId           String
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAssessmentId String
  userAssessment   UserSkillAssessment @relation(fields: [userAssessmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certificates")
}

// ============================================
// COMPANY REVIEW SYSTEM
// ============================================

model CompanyReview {
  id               String           @id @default(cuid())
  title            String?
  review           String
  rating           Float // Overall rating (1-5)
  cultureRating    Float? // Work culture rating
  workLifeBalance  Float? // Work-life balance rating
  facilitiesRating Float? // Facilities rating
  careerRating     Float? // Career opportunities rating
  jobPosition      String
  employmentStatus EmploymentStatus
  workDuration     String? // e.g., "2 years", "6 months"
  salaryEstimate   Int? // Monthly salary estimate
  isAnonymous      Boolean          @default(true)
  isVerified       Boolean          @default(false)

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  workExperienceId String?    @unique 
  workExperience   WorkExperience? @relation(fields: [workExperienceId], references: [id], onDelete:SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_reviews")
}

// ============================================
// ANALYTICS & REPORTING
// ============================================

model WebsiteAnalytics {
  id   String   @id @default(cuid())
  date DateTime @db.Date

  totalUsers          Int   @default(0)
  newUsers            Int   @default(0)
  activeUsers         Int   @default(0)
  totalJobPostings    Int   @default(0)
  newJobPostings      Int   @default(0)
  totalApplications   Int   @default(0)
  newApplications     Int   @default(0)
  totalSubscriptions  Int   @default(0)
  newSubscriptions    Int   @default(0)
  subscriptionRevenue Float @default(0)
  assessmentsTaken    Int   @default(0)
  certificatesIssued  Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date])
  @@map("website_analytics")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String
  link      String? 
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

// ============================================
// USER WORK HISTORY & VERIFICATION
// ============================================

model WorkExperience {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId          String
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  jobTitle           String    
  employmentStatus   EmploymentStatus 
  startDate          DateTime
  endDate            DateTime? 

  // --- Verification Fields ---
  isVerified         Boolean   @default(false) 
  verificationMethod VerificationMethod? 
  verificationProof  String?   
  verifiedAt         DateTime? 
  rejectionReason    String?   
  review CompanyReview?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
  @@map("work_experiences")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  USER // Job seeker
  COMPANY_ADMIN // Company administrator
  ADMIN // Site administrator
  Developer // Platform configuration admin
}

enum VerificationMethod {
  PAYSLIP
  CONTRACT
  COMPANY_EMAIL
  ADMIN_MANUAL
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  TWITTER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Education {
  HIGH_SCHOOL
  DIPLOMA
  BACHELOR
  MASTER
  DOCTORATE
  OTHER
}

enum CompanySize {
  STARTUP // 1-10 employees
  SMALL // 11-50 employees
  MEDIUM // 51-200 employees
  LARGE // 201-1000 employees
  ENTERPRISE // 1000+ employees
}

enum JobCategory {
  TECHNOLOGY
  MARKETING
  SALES
  FINANCE
  HUMAN_RESOURCES
  OPERATIONS
  DESIGN
  CUSTOMER_SERVICE
  HEALTHCARE
  EDUCATION
  CONSTRUCTION
  MANUFACTURING
  RETAIL
  HOSPITALITY
  TRANSPORTATION
  LEGAL
  CONSULTING
  MEDIA
  NON_PROFIT
  GOVERNMENT
  ENGINEERING
  SCIENCE_RESEARCH
  ARTS_ENTERTAINMENT
  WRITING_EDITING
  AGRICULTURE
  REAL_ESTATE
  AUTOMOTIVE
  AEROSPACE_DEFENSE
  ENERGY_UTILITIES
  TELECOMMUNICATIONS
  LOGISTICS_SUPPLY_CHAIN
  ARCHITECTURE_PLANNING
  SPORTS_FITNESS
  ENVIRONMENTAL_SERVICES
  SECURITY_PROTECTIVE_SERVICES
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
  REMOTE
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  TEST_REQUIRED
  TEST_COMPLETED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  ONLINE
  ONSITE
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  E_WALLET
  PAYMENT_GATEWAY  
  MIDTRANS_BCA_VA
  MIDTRANS_QRIS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum EmploymentStatus {
  CURRENT_EMPLOYEE
  FORMER_EMPLOYEE
  CONTRACTOR
  INTERN
}

enum NotificationType {
  NEW_APPLICATION_RECEIVED // For Company Admin
  APPLICATION_STATUS_UPDATE // For User
  INTERVIEW_SCHEDULED // For User & Company Admin
  INTERVIEW_REMINDER // For User & Company Admin
  SUBSCRIPTION_EXPIRING
  SUBSCRIPTION_ENDED
  NEW_JOB_MATCHING_PROFILE
  ASSESSMENT_COMPLETED
  CERTIFICATE_ISSUED
}

enum CityType {
  CITY
  REGENCY
}

enum RefundStatus {
  PENDING
  APPROVED
  COMPLETED
  REJECTED
}